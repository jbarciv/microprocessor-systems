
Lab_2_6_keypad_with_interruptions.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800200  00000192  00000206  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000192  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000208  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000238  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c7c  00000000  00000000  0000029c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000ba1  00000000  00000000  00000f18  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000031d  00000000  00000000  00001ab9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000048  00000000  00000000  00001dd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000578  00000000  00000000  00001e20  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000068  00000000  00000000  00002398  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002400  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
   c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  10:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  14:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  18:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  1c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  20:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  24:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  28:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  2c:	0c 94 89 00 	jmp	0x112	; 0x112 <__vector_11>
  30:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  34:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  38:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  3c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  40:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  44:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  48:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  4c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  50:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  54:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  58:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  5c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  60:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  64:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  68:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  6c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  70:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  74:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  78:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  7c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  80:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  84:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  88:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  8c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  90:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  94:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  98:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  9c:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  a8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  ac:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  b8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  bc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  c8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  cc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d4:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  d8:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  dc:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>
  e0:	0c 94 87 00 	jmp	0x10e	; 0x10e <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_copy_data>:
  f0:	12 e0       	ldi	r17, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	e2 e9       	ldi	r30, 0x92	; 146
  f8:	f1 e0       	ldi	r31, 0x01	; 1
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__do_copy_data+0x10>
  fc:	05 90       	lpm	r0, Z+
  fe:	0d 92       	st	X+, r0
 100:	a2 30       	cpi	r26, 0x02	; 2
 102:	b1 07       	cpc	r27, r17
 104:	d9 f7       	brne	.-10     	; 0xfc <__do_copy_data+0xc>
 106:	0e 94 b5 00 	call	0x16a	; 0x16a <main>
 10a:	0c 94 c7 00 	jmp	0x18e	; 0x18e <_exit>

0000010e <__bad_interrupt>:
 10e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000112 <__vector_11>:
#include <avr/interrupt.h>

unsigned char scan = 0x01;


ISR (PCINT2_vect){
 112:	1f 92       	push	r1
 114:	0f 92       	push	r0
 116:	0f b6       	in	r0, 0x3f	; 63
 118:	0f 92       	push	r0
 11a:	11 24       	eor	r1, r1
 11c:	8f 93       	push	r24
 11e:	9f 93       	push	r25
	for (char i=0 ; i<4 ; i++){
 120:	90 e0       	ldi	r25, 0x00	; 0
 122:	15 c0       	rjmp	.+42     	; 0x14e <__vector_11+0x3c>
	 	PORTK = scan;
 124:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 128:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7f0108>
	...
				"nop \n"
				"nop \n"
				"nop \n"				
				"nop \n"
			);
		if(PINK & 0xF0){
 134:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7f0106>
 138:	80 7f       	andi	r24, 0xF0	; 240
 13a:	19 f0       	breq	.+6      	; 0x142 <__vector_11+0x30>
	 		PORTB = PINK;
 13c:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <__TEXT_REGION_LENGTH__+0x7f0106>
 140:	85 b9       	out	0x05, r24	; 5
	 	}
	 	scan = scan << 1;
 142:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 146:	88 0f       	add	r24, r24
 148:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>

unsigned char scan = 0x01;


ISR (PCINT2_vect){
	for (char i=0 ; i<4 ; i++){
 14c:	9f 5f       	subi	r25, 0xFF	; 255
 14e:	94 30       	cpi	r25, 0x04	; 4
 150:	48 f3       	brcs	.-46     	; 0x124 <__vector_11+0x12>
		if(PINK & 0xF0){
	 		PORTB = PINK;
	 	}
	 	scan = scan << 1;
	 }
 	scan = 0x01;
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
	PCIFR = 0X04;	//bajamos banderas de interrupción
 158:	84 e0       	ldi	r24, 0x04	; 4
 15a:	8b bb       	out	0x1b, r24	; 27
	 
}
 15c:	9f 91       	pop	r25
 15e:	8f 91       	pop	r24
 160:	0f 90       	pop	r0
 162:	0f be       	out	0x3f, r0	; 63
 164:	0f 90       	pop	r0
 166:	1f 90       	pop	r1
 168:	18 95       	reti

0000016a <main>:

// emplearé el resgistro 2 para la interrupción externa
// pues usaré el conector J1 para tener desde PCINT 16 a PCINT 23 = registro 2

int main(void){
	DDRB = 0xFF;	// todos los LEDs como salida. 
 16a:	8f ef       	ldi	r24, 0xFF	; 255
 16c:	84 b9       	out	0x04, r24	; 4
	DDRK = 0x0F;	// PK(0:3) salida(1); PK(4:7) entrada (0)
 16e:	8f e0       	ldi	r24, 0x0F	; 15
 170:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <__TEXT_REGION_LENGTH__+0x7f0107>
	cli();
 174:	f8 94       	cli
	PCICR = 0x04;	// pongo a 1 el pin 2  => habilito el registro 2
 176:	84 e0       	ldi	r24, 0x04	; 4
 178:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7f0068>
	PCMSK2 = 0xF0;	// habilitar interrupción en filas del keypad
 17c:	90 ef       	ldi	r25, 0xF0	; 240
 17e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <__TEXT_REGION_LENGTH__+0x7f006d>
	PCIFR = 0x04;
 182:	8b bb       	out	0x1b, r24	; 27
	sei();
 184:	78 94       	sei

	while (1){
		PORTK = 0X0F;
 186:	8f e0       	ldi	r24, 0x0F	; 15
 188:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <__TEXT_REGION_LENGTH__+0x7f0108>
 18c:	fc cf       	rjmp	.-8      	; 0x186 <main+0x1c>

0000018e <_exit>:
 18e:	f8 94       	cli

00000190 <__stop_program>:
 190:	ff cf       	rjmp	.-2      	; 0x190 <__stop_program>
