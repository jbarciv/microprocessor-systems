
Lab_2_5_heart_rate_monitor_game.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000002a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000022c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800200  00800200  000002a0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002a0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  0000030c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000dad  00000000  00000000  0000036c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9a  00000000  00000000  00001119  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000456  00000000  00000000  00001db3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  0000220c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005db  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000107  00000000  00000000  000028c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000029ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 f2 00 	jmp	0x1e4	; 0x1e4 <__vector_8>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_47>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a4 30       	cpi	r26, 0x04	; 4
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 03 01 	call	0x206	; 0x206 <main>
 104:	0c 94 14 01 	jmp	0x228	; 0x228 <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <setupPeriodicInt>:
#include "Int01s.h"

void (*functionPointer)();

void setupPeriodicInt() {
  cli();
 10c:	f8 94       	cli
  // Timer 5 mode CTC counting up to 3125 interrupting on OCRA match
  TCCR5A = 0x00; 
 10e:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7f0120>
  TCCR5B = 0x0C;
 112:	8c e0       	ldi	r24, 0x0C	; 12
 114:	80 93 21 01 	sts	0x0121, r24	; 0x800121 <__TEXT_REGION_LENGTH__+0x7f0121>
  OCR5A  = 3124;
 118:	84 e3       	ldi	r24, 0x34	; 52
 11a:	9c e0       	ldi	r25, 0x0C	; 12
 11c:	90 93 29 01 	sts	0x0129, r25	; 0x800129 <__TEXT_REGION_LENGTH__+0x7f0129>
 120:	80 93 28 01 	sts	0x0128, r24	; 0x800128 <__TEXT_REGION_LENGTH__+0x7f0128>
  TIMSK5 = 0x02;
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <__TEXT_REGION_LENGTH__+0x7f0073>
  sei();  
 12a:	78 94       	sei
 12c:	08 95       	ret

0000012e <setPeriodicIntCallback>:
}

void setPeriodicIntCallback( void (*fptr)() ) {
  functionPointer = fptr;
 12e:	90 93 03 02 	sts	0x0203, r25	; 0x800203 <functionPointer+0x1>
 132:	80 93 02 02 	sts	0x0202, r24	; 0x800202 <functionPointer>
 136:	08 95       	ret

00000138 <__vector_47>:
}

ISR( TIMER5_COMPA_vect ) {
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	ef 93       	push	r30
 158:	ff 93       	push	r31
  if (functionPointer != NULL) functionPointer();
 15a:	e0 91 02 02 	lds	r30, 0x0202	; 0x800202 <functionPointer>
 15e:	f0 91 03 02 	lds	r31, 0x0203	; 0x800203 <functionPointer+0x1>
 162:	30 97       	sbiw	r30, 0x00	; 0
 164:	09 f0       	breq	.+2      	; 0x168 <__vector_47+0x30>
 166:	09 95       	icall
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	bf 91       	pop	r27
 16e:	af 91       	pop	r26
 170:	9f 91       	pop	r25
 172:	8f 91       	pop	r24
 174:	7f 91       	pop	r23
 176:	6f 91       	pop	r22
 178:	5f 91       	pop	r21
 17a:	4f 91       	pop	r20
 17c:	3f 91       	pop	r19
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <toggle>:

unsigned char i=0;
unsigned char pulse=0;

void toggle (){
	if (i == 3){ /* time window of 3 tenths of a second */
 18a:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <i>
 18e:	83 30       	cpi	r24, 0x03	; 3
 190:	19 f5       	brne	.+70     	; 0x1d8 <toggle+0x4e>
		switch (pulse){
 192:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 196:	83 30       	cpi	r24, 0x03	; 3
 198:	89 f0       	breq	.+34     	; 0x1bc <toggle+0x32>
 19a:	28 f4       	brcc	.+10     	; 0x1a6 <toggle+0x1c>
 19c:	81 30       	cpi	r24, 0x01	; 1
 19e:	41 f0       	breq	.+16     	; 0x1b0 <toggle+0x26>
 1a0:	82 30       	cpi	r24, 0x02	; 2
 1a2:	49 f0       	breq	.+18     	; 0x1b6 <toggle+0x2c>
 1a4:	14 c0       	rjmp	.+40     	; 0x1ce <toggle+0x44>
 1a6:	84 30       	cpi	r24, 0x04	; 4
 1a8:	61 f0       	breq	.+24     	; 0x1c2 <toggle+0x38>
 1aa:	85 30       	cpi	r24, 0x05	; 5
 1ac:	69 f0       	breq	.+26     	; 0x1c8 <toggle+0x3e>
 1ae:	0f c0       	rjmp	.+30     	; 0x1ce <toggle+0x44>
			case 1:
			PORTC = 0b00000001;
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	88 b9       	out	0x08, r24	; 8
			break;
 1b4:	0d c0       	rjmp	.+26     	; 0x1d0 <toggle+0x46>
			case 2:
			PORTC = 0b00000011;
 1b6:	83 e0       	ldi	r24, 0x03	; 3
 1b8:	88 b9       	out	0x08, r24	; 8
			break;
 1ba:	0a c0       	rjmp	.+20     	; 0x1d0 <toggle+0x46>
			case 3:
			PORTC = 0b00000111;
 1bc:	87 e0       	ldi	r24, 0x07	; 7
 1be:	88 b9       	out	0x08, r24	; 8
			break;
 1c0:	07 c0       	rjmp	.+14     	; 0x1d0 <toggle+0x46>
			case 4:
			PORTC = 0b00001111;
 1c2:	8f e0       	ldi	r24, 0x0F	; 15
 1c4:	88 b9       	out	0x08, r24	; 8
			break;
 1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <toggle+0x46>
			case 5:
			PORTC = 0b00011111;
 1c8:	8f e1       	ldi	r24, 0x1F	; 31
 1ca:	88 b9       	out	0x08, r24	; 8
			break;
 1cc:	01 c0       	rjmp	.+2      	; 0x1d0 <toggle+0x46>
			default: PORTC=0x00;
 1ce:	18 b8       	out	0x08, r1	; 8
		}
		i = 0;
 1d0:	10 92 01 02 	sts	0x0201, r1	; 0x800201 <i>
		pulse = 0;
 1d4:	10 92 00 02 	sts	0x0200, r1	; 0x800200 <__DATA_REGION_ORIGIN__>
	}
	i++;
 1d8:	80 91 01 02 	lds	r24, 0x0201	; 0x800201 <i>
 1dc:	8f 5f       	subi	r24, 0xFF	; 255
 1de:	80 93 01 02 	sts	0x0201, r24	; 0x800201 <i>
 1e2:	08 95       	ret

000001e4 <__vector_8>:
}

ISR (INT7_vect){
 1e4:	1f 92       	push	r1
 1e6:	0f 92       	push	r0
 1e8:	0f b6       	in	r0, 0x3f	; 63
 1ea:	0f 92       	push	r0
 1ec:	11 24       	eor	r1, r1
 1ee:	8f 93       	push	r24
	pulse++;
 1f0:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1f4:	8f 5f       	subi	r24, 0xFF	; 255
 1f6:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
}
 1fa:	8f 91       	pop	r24
 1fc:	0f 90       	pop	r0
 1fe:	0f be       	out	0x3f, r0	; 63
 200:	0f 90       	pop	r0
 202:	1f 90       	pop	r1
 204:	18 95       	reti

00000206 <main>:

int main(void){
	cli();
 206:	f8 94       	cli
	DDRC = 0xFF;
 208:	8f ef       	ldi	r24, 0xFF	; 255
 20a:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x00;
 20c:	1d b8       	out	0x0d, r1	; 13
	EICRB = 0x80;
 20e:	80 e8       	ldi	r24, 0x80	; 128
 210:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f006a>
	EIMSK = 0x80;
 214:	8d bb       	out	0x1d, r24	; 29
	EIFR = 0x80;
 216:	8c bb       	out	0x1c, r24	; 28
	setupPeriodicInt();
 218:	0e 94 86 00 	call	0x10c	; 0x10c <setupPeriodicInt>
	setPeriodicIntCallback(toggle);
 21c:	85 ec       	ldi	r24, 0xC5	; 197
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	0e 94 97 00 	call	0x12e	; 0x12e <setPeriodicIntCallback>
	sei();
 224:	78 94       	sei
 226:	ff cf       	rjmp	.-2      	; 0x226 <main+0x20>

00000228 <_exit>:
 228:	f8 94       	cli

0000022a <__stop_program>:
 22a:	ff cf       	rjmp	.-2      	; 0x22a <__stop_program>
