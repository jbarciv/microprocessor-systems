
Lab_1_4_keybard.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  00000184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000130  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000184  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  000001f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000c63  00000000  00000000  00000210  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b87  00000000  00000000  00000e73  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002d2  00000000  00000000  000019fa  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00001ccc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000548  00000000  00000000  00001cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000043  00000000  00000000  00002238  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  0000227b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
   c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  10:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  14:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  18:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  1c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  20:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  24:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  28:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  2c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  30:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  34:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  38:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  3c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  40:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  44:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  48:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  4c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  50:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  54:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  58:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  5c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  60:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  64:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  68:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  6c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  70:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  74:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  78:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  7c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  80:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  84:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  88:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  8c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  90:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  94:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  98:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  9c:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  a8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  ac:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  b8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  bc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  c8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  cc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d4:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  d8:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  dc:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>
  e0:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	0e 94 7e 00 	call	0xfc	; 0xfc <main>
  f4:	0c 94 96 00 	jmp	0x12c	; 0x12c <_exit>

000000f8 <__bad_interrupt>:
  f8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000fc <main>:

#include <avr/io.h>

int main(void)
{
	DDRC = 0x0F; /* DDRC0-3 as output, DDRC4-7 as input*/
  fc:	8f e0       	ldi	r24, 0x0F	; 15
  fe:	87 b9       	out	0x07, r24	; 7
	DDRA = 0xFF; /* DDRA0-7 as output*/
 100:	8f ef       	ldi	r24, 0xFF	; 255
 102:	81 b9       	out	0x01, r24	; 1
	int scan = 0x01;
	while (1){
		for (char i=0 ; i<4; i++){
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	21 e0       	ldi	r18, 0x01	; 1
 108:	30 e0       	ldi	r19, 0x00	; 0
 10a:	0d c0       	rjmp	.+26     	; 0x126 <main+0x2a>
			PORTC = scan;
 10c:	28 b9       	out	0x08, r18	; 8
	...
				"nop \n"
				"nop \n"
				"nop \n"				
				"nop \n"
			);
			if (PINC & 0xF0){
 116:	86 b1       	in	r24, 0x06	; 6
 118:	80 7f       	andi	r24, 0xF0	; 240
 11a:	11 f0       	breq	.+4      	; 0x120 <main+0x24>
				PORTA = PINC;
 11c:	86 b1       	in	r24, 0x06	; 6
 11e:	82 b9       	out	0x02, r24	; 2
			}
			scan = scan << 1;
 120:	22 0f       	add	r18, r18
 122:	33 1f       	adc	r19, r19
{
	DDRC = 0x0F; /* DDRC0-3 as output, DDRC4-7 as input*/
	DDRA = 0xFF; /* DDRA0-7 as output*/
	int scan = 0x01;
	while (1){
		for (char i=0 ; i<4; i++){
 124:	9f 5f       	subi	r25, 0xFF	; 255
 126:	94 30       	cpi	r25, 0x04	; 4
 128:	88 f3       	brcs	.-30     	; 0x10c <main+0x10>
 12a:	ec cf       	rjmp	.-40     	; 0x104 <main+0x8>

0000012c <_exit>:
 12c:	f8 94       	cli

0000012e <__stop_program>:
 12e:	ff cf       	rjmp	.-2      	; 0x12e <__stop_program>
